#!/usr/bin/env bash
#
# patches/commits beauty.
# (linux only, because of some options for grep)
#
# And it _can_ test code for newly create refs.
# (Thanks to http://stackoverflow.com/a/3512275/328260)
#
# hooks.crlfpatches
#   This boolean sets whether patch can have CRLF (\r\n)
#   By default they won't be allowed.
# hooks.trailingspaces
#   This boolean sets whether commit can have trailing spaces.
#   By default they won't be allowed.
# hooks.numberofcharsperline
#   This int sets number of chars per commit line.
#   By default 80 characters.
# hooks.regexpforcommittitle
#   This install regexp for commit title (first line of message).
#   Regexp for $(git grep -E)
#   By default: empty
# hooks.invertregexpforpatchnewchanges
#   This install invert regexp for patch new changes (that start with +).
#   If new changes will match this regexp, it will be rejected.
#   Regexp for $(git grep -E)
#   By default: empty
# hooks.beatymergecommits
#   This will don't check merge commits
#   By default: false
# hooks.gofmt
#   Perform go fmt validation of Go code
#   By default: false
# hooks.gofmtoptions
#   Options given to go fmt
# hooks.clangformat
#   Perform clang-format validation on C/C++(...) code
#   By default: false (set it to binary name)
# hooks.clangformatoptions
#   Options for clang-format (not config)
#   Example: "{ TabWidth: 4, Language: Cpp }"
# hooks.verbose
#   Some useful information for debugging
#   By default: false
#

function debug_message()
{
    if [ "$verbose" != "false" ]; then
        echo "$*"
    fi
}

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
    echo "Don't run this script from the command line." >&2
    exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
    echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
    exit 1
fi

# --- Config
trailingspaces=$(git config --bool hooks.trailingspaces)
crlfpatches=$(git config --bool hooks.crlfpatches)
numberofcharsperline=$(git config --int hooks.numberofcharsperline)
regexpforcommittitle=$(git config hooks.regexpforcommittitle)
invertregexpforpatchnewchanges=$(git config hooks.invertregexpforpatchnewchanges)
beatymergecommits=$(git config --bool hooks.beatymergecommits)

gofmt=$(git config --bool hooks.gofmt)
gofmtoptionstemp=$(git config hooks.gofmtoptions)
gofmtoptions=${gofmtoptionstemp:-"-s=true"}

clangformat=$(git config hooks.clangformat)
clangformatoptions=$(git config hooks.clangformatoptions)

# Initialize some default values
if [[ $numberofcharsperline -eq 0 ]]; then
    numberofcharsperline=80
fi
if [ -n "$clangformatoptions" ]; then
    clangformatoptions="-style=\"$clangformatoptions\""
fi

zero="0000000000000000000000000000000000000000"

validate_ref()
{
    ref="$1"

    if [ -z "$ref" ]; then
        echo "Usage: $0 <ref>" >&2
        exit 1
    fi

    # hooks.beatymergecommits
    if [ "$beatymergecommits" = "false" ] && [[ $(git show --pretty=%p $ref | head -n1 | awk '{print NF}') -gt 1 ]]; then
        debug_message "$ref is a merge commit. And won't be checked."
        return
    fi

    # hooks.numberofcharsperline
    if [[ $numberofcharsperline -gt 0 ]]; then
        long_subject=$(git log --pretty=%s $ref^..$ref | grep -E ".{$(($numberofcharsperline + 1))}" | head -n1)
        if [ -n "$long_subject" ]; then
        echo "*** Commit subject over ${numberofcharsperline} character in $ref:"
        echo "    $long_subject"
        exit 1
        fi
    fi

    # hooks.regexpforcommittitle
    if [ ! -z $regexpforcommittitle ]; then
        not_matched=$(git log --pretty=%s $ref^..$ref | grep -v -E $regexpforcommittitle | head -n1)
        if [ -n "$not_matched" ]; then
        echo "*** Commit subject not matched '${regexpforcommittitle}' pattern in $ref:"
        echo "    $not_matched"
        exit 1
        fi
    fi

    # hooks.trailingspaces
    if [ "$trailingspaces" != "false" ]; then
        line_with_trailing_spaces=$(git diff $ref^..$ref | grep '^+' | grep -P '(^[\t ]|[\t ]$)' | wc -l)
        if [[ $line_with_trailing_spaces -gt 0 ]]; then
            echo "*** New changes, contain trailing spaces in $ref:"
            echo "    Counted: $line_with_trailing_spaces lines. Fix it first."
            exit 1
        fi
    fi

    # hooks.crlfpatches
    if [ "$crlfpatches" != "false" ]; then
        line_with_crlf=$(git diff $ref^..$ref | grep '^+' | grep $'\r$' | wc -l)
        if [[ $line_with_crlf -gt 0 ]]; then
            echo "*** New changes, contain CRLF in $ref:"
            echo "    Counted: $line_with_crlf lines. Fix it first."
            exit 1
        fi
    fi

    # hooks.invertregexpforpatchnewchanges
    if [ ! -z "$invertregexpforpatchnewchanges" ]; then
        line_matched_invert_regexp=$(git diff $ref^..$ref | grep '^+' | grep -E $invertregexpforpatchnewchanges | wc -l)
        if [[ $line_matched_invert_regexp -gt 0 ]]; then
            echo "*** New changes, match invert regexp '${invertregexpforpatchnewchanges}' in $ref:"
            echo "    Counted: $line_matched_invert_regexp lines. Fix it first."
            exit 1
        fi
    fi

    # hooks.gofmt
    if [ "$gofmt" == "true" ]; then
        files=$(git diff --name-only $ref^..$ref | grep .*.go )
        for f in $files; do
            fmt=$(git cat-file -p $ref:$f | gofmt $gofmtoptions -d=true 2>&1)
            if [ -n "$fmt" ]; then
                echo "*** Error you need to perform gofmt on $f <$ref>"
                debug_message "$fmt"
                exit 1
            fi
        done
    fi

    # hooks.clangformat
    if [ -n "$clangformat" ]; then
        files=$(git diff --name-only $ref^..$ref | egrep "\.(cpp|cc|c|h|hpp|cxx)$")
        for f in $files; do
            fmt=$(diff -u <(git cat-file -p $ref:$f) <(git cat-file -p $ref:$f | eval $clangformat $clangformatoptions))
            if [ -n "$fmt" ]; then
                echo "*** Error you need to perform clang-format on $f <$ref>"
                debug_message "$fmt"
                exit 1
            fi
        done
    fi
}

debug_message "We have $oldrev..$newrev for $refname range"

if [ "$oldrev" = "$zero" ]; then
    # list everything reachable from newrev but not any heads
    for ref in $(git rev-list $(git for-each-ref --format='%(refname)' refs/heads/* | sed 's/^/\^/') "$newrev"); do
        validate_ref $ref
    done
else
    for ref in $(git rev-list "$oldrev..$newrev"); do
        debug_message "Validating $ref"
        validate_ref $ref
    done
fi

exit 0
