#!/usr/bin/env bash
#
# patches/commits beauty.
# (linux only, because of some options for grep)
#
# hooks.trailingspaces
#   This boolean sets whether commit can have trailing spaces.
#   By default they won't be allowed.
# hooks.numberofcharsperline
#   This int sets number of chars per commit line.
#   By default 80 characters.
# hooks.regexpforcommittitle
#   This install regexp for commit title (first line of message), if not
#   matched regexp, return 0. Regexp for $(git grep -E)
#   By default: empty
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
    echo "Don't run this script from the command line." >&2
    echo " (if you want, you could supply GIT_DIR then run" >&2
    echo "  $0 <ref> <oldrev> <newrev>)" >&2
    exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
    echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
    exit 1
fi

# --- Config
trailingspaces=$(git config --bool hooks.trailingspaces)
numberofcharsperline=$(git config --int hooks.numberofcharsperline)
regexpforcommittitle=$(git config hooks.regexpforcommittitle)

# Initialize some default values
if [[ $numberofcharsperline -eq 0 ]]; then
    numberofcharsperline=80
fi

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
    newrev_type=delete
else
    newrev_type=$(git cat-file -t $newrev)
fi

# hooks.numberofcharsperline
if [[ $numberofcharsperline -gt 0 ]]; then
    long_subject=$(git log --pretty=%s $oldrev..$newrev | grep -E ".{$(($numberofcharsperline + 1))}" | head -n1)
    if [ -n "$long_subject" ]; then
	echo "*** Commit subject over ${numberofcharsperline} character:"
	echo "    $long_subject"
	exit 1
    fi
fi

# hooks.regexpforcommittitle
if [ ! -z $regexpforcommittitle ]; then
    not_matched=$(git log --pretty=%s $oldrev..$newrev | grep -v -E $regexpforcommittitle | head -n1)
    if [ -n "$not_matched" ]; then
	echo "*** Commit subject not matched '${regexpforcommittitle}' pattern:"
	echo "    $not_matched"
	exit 1
    fi
fi

# hooks.trailingspaces
if [ "$trailingspaces" != "false" ]; then
    line_with_trailing_spaces=$(git diff $oldrev..$newrev | grep '^+' | grep -P '(^[\t ]|[\t ]$)' | wc -l)
    if [[ $line_with_trailing_spaces -gt 0 ]]; then
        echo "*** New changes, contain trailing spaces:"
        echo "    Counted: $line_with_trailing_spaces lines. Fix it first."
        exit 1
    fi
fi

exit 0
